import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.library'

repositories {
    flatDir {
        dirs 'src/main/libs', '../../Framework/framework/build/outputs/aar/'
    }
}

android {
    compileSdkVersion 21
    buildToolsVersion '23.0.3'

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 19
    }

    task buildNative(type: Exec) {
        def ndkbuild = ""
        if (rootProject.hasProperty("ANDROID_NDK_HOME")) {
            ndkbuild = rootProject.property("ANDROID_NDK_HOME")
            ndkbuild += '/'
        }
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            ndkbuild += 'ndk-build.cmd'
        } else {
            ndkbuild += 'ndk-build'
        }

        environment 'OVR_PLATFORM_SDK', rootProject.property("OVR_PLATFORM_SDK")
        commandLine ndkbuild, '-C', file('src/main').absolutePath, '-j', Runtime.runtime.availableProcessors()//, 'NDK_DEBUG=1'
    }

    buildTypes {
        debug {
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
        }
    }

    sourceSets.main {
        java.srcDirs = ['src/main/java']
        jni.srcDirs = [] // no auto generation of Android.mk
        // pre-compiled libraries
        jniLibs {
            srcDir 'src/main/libs'
        }
    }

    task cleanNative(type: Exec) {
        def ndkbuild = ""
        if (rootProject.hasProperty("ANDROID_NDK_HOME")) {
            ndkbuild = rootProject.property("ANDROID_NDK_HOME")
            ndkbuild += '/'
        }
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            ndkbuild += 'ndk-build.cmd'
        } else {
            ndkbuild += 'ndk-build'
        }

        environment 'OVR_PLATFORM_SDK', rootProject.property("OVR_PLATFORM_SDK")
        commandLine ndkbuild, '-C', file('src/main').absolutePath, '-j', Runtime.runtime.availableProcessors(), 'clean'
    }

    clean.dependsOn 'cleanNative'

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn buildNative
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile fileTree(dir: 'src/main/libs', include: ['*.jar'])
    compile(name: 'framework-debug', ext: 'aar')
}

assembleDebug {}.doLast {
    task copyAARFiles(type: Copy) {
        if (rootProject.hasProperty("LIBS_DIRECTORY")) {
            println "copying aar files to the libs_directory"
            def libsdirPath = projectDir.absolutePath + '/../../../' +
                    rootProject.property("LIBS_DIRECTORY")
            def libsDir = new File(libsdirPath);
            if (libsDir.exists()) {
                from 'build/outputs/aar'
                into libsDir
                include '**/*.aar'
            } else {
                println "Cannot copy aar files, libs directory does not exist!"
            }
        }
    }
    tasks.copyAARFiles.execute()
}
